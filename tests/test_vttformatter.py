import unittest
from ruamel.yaml import YAML
import ruamel.yaml
from vttformatter import VttFormatter

class TestVttFormatter(unittest.TestCase):

    def setUp( self ):
        self.formatter = VttFormatter( 'data/test_AutoGeneratedCaption.vtt' )

     
    def test_import_file( self ):
        try:
            with open('data/test_data_list.txt') as fp:
                test_data_list = fp.readlines()
        except FileNotFoundError:
            raise FileNotFoundError
        self.formatter.import_file()
        self.assertEqual( self.formatter.data, test_data_list )

    def test_create_dictionary( self ):
        try:
            test_data_dict = read_yaml('data/test_data_dict.yml')
        except FileNotFoundError:
            raise FileNotFoundError
        self.assertEqual( self.formatter.create_dictionary(), test_data_dict )

    def test_format_text( self ):
        try:
            with open('data/test_part_mess.txt') as fp:
                test_part_mess = fp.readlines()
        except FileNotFoundError:
            raise FileNotFoundError
        pm = [line for line in self.formatter.format_text()[0]]
        s = ""
        new_pm = [str(s.join(pm))]
        self.assertEqual( new_pm, test_part_mess )
        try:
            with open('data/test_full_mess.txt') as fp:
                test_full_mess = fp.readlines()
        except FileNotFoundError:
            raise FileNotFoundError
        fm = [line for line in self.formatter.format_text()[1]]
        s = ""
        new_fm = [str(s.join(fm))]
        self.assertEqual( new_fm, test_full_mess )

    def test_reformat_vtt( self ):
        try:
            with open('data/test_AutoGeneratedCaption.txt' ) as fp:
                test_text = fp.readlines()
        except FileNotFoundError:
            raise FileNotFoundError
        self.formatter.reformat_vtt()
        try:
            with open('test_AutoGeneratedCaption.txt' ) as fp:
                new_text = fp.readlines()
        except FileNotFoundError:
            raise FileNotFoundError
        self.assertEqual(new_text, test_text)

def read_yaml(filename):
    ''' Try to read passed filename as yaml'''
    yaml=YAML(typ="safe")
    ScannerError = ruamel.yaml.error.MarkedYAMLError
    try:
        with open(filename, 'r') as fp:
            return yaml.load(fp)
    except ScannerError:
        raise ScannerError
    except FileNotFoundError:
        raise FileNotFoundError
    except:
        raise Exception


